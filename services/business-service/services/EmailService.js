const nodemailer = require('nodemailer');
const winston = require('winston');

// Setup logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/email.log' })
  ]
});

/**
 * Email Service for sending emails via Gmail SMTP
 */
class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  /**
   * Initialize email transporter
   */
  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.EMAIL_PORT) || 587,
        secure: process.env.EMAIL_SECURE === 'true', // true for 465, false for other ports
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        },
        tls: {
          rejectUnauthorized: false
        }
      });

      // Verify connection configuration
      this.transporter.verify((error, success) => {
        if (error) {
          logger.error('Email transporter verification failed:', error);
        } else {
          logger.info('Email transporter is ready to send messages');
        }
      });

    } catch (error) {
      logger.error('Failed to initialize email transporter:', error);
    }
  }

  /**
   * Send email
   * @param {Object} options - Email options
   * @param {string} options.to - Recipient email
   * @param {string} options.subject - Email subject
   * @param {string} options.html - HTML content
   * @param {string} options.text - Plain text content
   * @returns {Promise<Object>}
   */
  async sendEmail(options) {
    try {
      if (!this.transporter) {
        throw new Error('Email transporter not initialized');
      }

      const mailOptions = {
        from: `"${process.env.EMAIL_FROM_NAME || 'TopCV Recruitment'}" <${process.env.EMAIL_FROM_ADDRESS}>`,
        to: options.to,
        subject: options.subject,
        html: options.html,
        text: options.text
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Email sent successfully', {
        to: options.to,
        subject: options.subject,
        messageId: result.messageId
      });

      return {
        success: true,
        messageId: result.messageId,
        response: result.response
      };

    } catch (error) {
      logger.error('Failed to send email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Send OTP email
   * @param {string} email - Recipient email
   * @param {string} otpCode - OTP code
   * @param {string} type - OTP type
   * @returns {Promise<Object>}
   */
  async sendOTPEmail(email, otpCode, type) {
    try {
      const subject = this.getOTPSubject(type);
      const { html, text } = this.getOTPTemplate(otpCode, type);

      return await this.sendEmail({
        to: email,
        subject,
        html,
        text
      });

    } catch (error) {
      logger.error('Failed to send OTP email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Send welcome email
   * @param {string} email - Recipient email
   * @param {string} fullName - User's full name
   * @returns {Promise<Object>}
   */
  async sendWelcomeEmail(email, fullName) {
    try {
      const subject = 'üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi TopCV!';
      const { html, text } = this.getWelcomeTemplate(fullName);

      return await this.sendEmail({
        to: email,
        subject,
        html,
        text
      });

    } catch (error) {
      logger.error('Failed to send welcome email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Send password reset email
   * @param {string} email - Recipient email
   * @param {string} resetToken - Reset token
   * @param {string} fullName - User's full name
   * @returns {Promise<Object>}
   */
  async sendPasswordResetEmail(email, resetToken, fullName) {
    try {
      const subject = 'üîí ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u TopCV';
      const { html, text } = this.getPasswordResetTemplate(resetToken, fullName);

      return await this.sendEmail({
        to: email,
        subject,
        html,
        text
      });

    } catch (error) {
      logger.error('Failed to send password reset email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Send job application notification
   * @param {string} email - Recipient email
   * @param {Object} jobData - Job information
   * @param {Object} candidateData - Candidate information
   * @returns {Promise<Object>}
   */
  async sendJobApplicationEmail(email, jobData, candidateData) {
    try {
      const subject = `üìã ·ª®ng tuy·ªÉn m·ªõi cho v·ªã tr√≠: ${jobData.title}`;
      const { html, text } = this.getJobApplicationTemplate(jobData, candidateData);

      return await this.sendEmail({
        to: email,
        subject,
        html,
        text
      });

    } catch (error) {
      logger.error('Failed to send job application email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get OTP subject based on type
   * @param {string} type - OTP type
   * @returns {string}
   */
  getOTPSubject(type) {
    const subjects = {
      REGISTRATION: 'üìß X√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n TopCV',
      LOGIN: 'üîê M√£ x√°c th·ª±c ƒëƒÉng nh·∫≠p TopCV',
      PASSWORD_RESET: 'üîë M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
      EMAIL_VERIFICATION: '‚úÖ X√°c th·ª±c ƒë·ªãa ch·ªâ email TopCV'
    };
    return subjects[type] || 'üî¢ M√£ x√°c th·ª±c TopCV';
  }

  /**
   * Get OTP email template
   * @param {string} otpCode - OTP code
   * @param {string} type - OTP type
   * @returns {Object} - HTML and text templates
   */
  getOTPTemplate(otpCode, type) {
    const typeMessages = {
      REGISTRATION: 'ƒëƒÉng k√Ω t√†i kho·∫£n',
      LOGIN: 'ƒëƒÉng nh·∫≠p',
      PASSWORD_RESET: 'ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
      EMAIL_VERIFICATION: 'x√°c th·ª±c email'
    };

    const message = typeMessages[type] || 'x√°c th·ª±c';
    const expiryMinutes = 10;

    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>M√£ x√°c th·ª±c TopCV</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #007bff; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .otp-code { background: #007bff; color: white; font-size: 32px; font-weight: bold; padding: 15px; text-align: center; border-radius: 8px; margin: 20px 0; letter-spacing: 5px; }
            .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöÄ TopCV Recruitment</h1>
                <p>M√£ x√°c th·ª±c ${message}</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o!</h2>
                <p>B·∫°n ƒë√£ y√™u c·∫ßu ${message} tr√™n h·ªá th·ªëng TopCV. Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c b√™n d∆∞·ªõi:</p>
                
                <div class="otp-code">${otpCode}</div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                    <ul>
                        <li>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <strong>${expiryMinutes} ph√∫t</strong></li>
                        <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email</li>
                    </ul>
                </div>
                
                <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng TopCV!</p>
            </div>
            <div class="footer">
                <p>¬© 2025 TopCV Recruitment System. All rights reserved.</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            </div>
        </div>
    </body>
    </html>`;

    const text = `
TopCV Recruitment - M√£ x√°c th·ª±c ${message}

Xin ch√†o!

B·∫°n ƒë√£ y√™u c·∫ßu ${message} tr√™n h·ªá th·ªëng TopCV.
M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otpCode}

L∆∞u √Ω:
- M√£ n√†y s·∫Ω h·∫øt h·∫°n sau ${expiryMinutes} ph√∫t
- Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai
- N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email

C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng TopCV!

¬© 2025 TopCV Recruitment System
`;

    return { html, text };
  }

  /**
   * Get welcome email template
   * @param {string} fullName - User's full name
   * @returns {Object} - HTML and text templates
   */
  getWelcomeTemplate(fullName) {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Ch√†o m·ª´ng ƒë·∫øn v·ªõi TopCV</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .feature { background: white; padding: 20px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #007bff; }
            .cta-button { display: inline-block; background: #007bff; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi TopCV!</h1>
                <p>H·ªá th·ªëng tuy·ªÉn d·ª•ng h√†ng ƒë·∫ßu Vi·ªát Nam</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o ${fullName}!</h2>
                <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng tr√™n TopCV. B·∫°n ƒë√£ s·∫µn s√†ng kh√°m ph√° nh·ªØng c∆° h·ªôi ngh·ªÅ nghi·ªáp tuy·ªát v·ªùi!</p>
                
                <div class="feature">
                    <h3>üîç T√¨m ki·∫øm vi·ªác l√†m</h3>
                    <p>Kh√°m ph√° h√†ng ngh√¨n c∆° h·ªôi vi·ªác l√†m t·ª´ c√°c c√¥ng ty h√†ng ƒë·∫ßu</p>
                </div>
                
                <div class="feature">
                    <h3>üìÑ Qu·∫£n l√Ω CV</h3>
                    <p>T·∫°o v√† qu·∫£n l√Ω CV chuy√™n nghi·ªáp, tƒÉng c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng</p>
                </div>
                
                <div class="feature">
                    <h3>ü§ñ AI Matching</h3>
                    <p>H·ªá th·ªëng AI th√¥ng minh gi√∫p k·∫øt n·ªëi b·∫°n v·ªõi c√¥ng vi·ªác ph√π h·ª£p</p>
                </div>
                
                <div style="text-align: center;">
                    <a href="https://topcv.click" class="cta-button">B·∫Øt ƒë·∫ßu t√¨m vi·ªác ngay</a>
                </div>
                
                <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i!</p>
            </div>
            <div class="footer">
                <p>¬© 2025 TopCV Recruitment System. All rights reserved.</p>
                <p>Li√™n h·ªá: support@topcv.click | https://topcv.click</p>
            </div>
        </div>
    </body>
    </html>`;

    const text = `
Ch√†o m·ª´ng ƒë·∫øn v·ªõi TopCV!

Xin ch√†o ${fullName}!

Ch√∫c m·ª´ng b·∫°n ƒë√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng tr√™n TopCV. B·∫°n ƒë√£ s·∫µn s√†ng kh√°m ph√° nh·ªØng c∆° h·ªôi ngh·ªÅ nghi·ªáp tuy·ªát v·ªùi!

T√≠nh nƒÉng n·ªïi b·∫≠t:
- T√¨m ki·∫øm vi·ªác l√†m: Kh√°m ph√° h√†ng ngh√¨n c∆° h·ªôi vi·ªác l√†m
- Qu·∫£n l√Ω CV: T·∫°o v√† qu·∫£n l√Ω CV chuy√™n nghi·ªáp  
- AI Matching: H·ªá th·ªëng AI k·∫øt n·ªëi b·∫°n v·ªõi c√¥ng vi·ªác ph√π h·ª£p

Truy c·∫≠p: https://topcv.click

¬© 2025 TopCV Recruitment System
Li√™n h·ªá: support@topcv.click
`;

    return { html, text };
  }

  /**
   * Get password reset email template
   * @param {string} resetToken - Reset token
   * @param {string} fullName - User's full name
   * @returns {Object} - HTML and text templates
   */
  getPasswordResetTemplate(resetToken, fullName) {
    const resetUrl = `https://topcv.click/reset-password?token=${resetToken}`;
    
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u TopCV</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #dc3545; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .reset-button { display: inline-block; background: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; font-weight: bold; }
            .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîí TopCV Recruitment</h1>
                <p>Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o ${fullName}!</h2>
                <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n TopCV c·ªßa b·∫°n.</p>
                
                <div style="text-align: center;">
                    <a href="${resetUrl}" class="reset-button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong>
                    <ul>
                        <li>Link n√†y s·∫Ω h·∫øt h·∫°n sau <strong>1 gi·ªù</strong></li>
                        <li>Ch·ªâ s·ª≠ d·ª•ng link n√†y m·ªôt l·∫ßn duy nh·∫•t</li>
                        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                        <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                    </ul>
                </div>
                
                <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy link sau v√†o tr√¨nh duy·ªát:</p>
                <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 5px;">${resetUrl}</p>
            </div>
            <div class="footer">
                <p>¬© 2025 TopCV Recruitment System. All rights reserved.</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            </div>
        </div>
    </body>
    </html>`;

    const text = `
TopCV Recruitment - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u

Xin ch√†o ${fullName}!

Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n TopCV c·ªßa b·∫°n.

ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng truy c·∫≠p link sau:
${resetUrl}

L∆∞u √Ω b·∫£o m·∫≠t:
- Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù
- Ch·ªâ s·ª≠ d·ª•ng link n√†y m·ªôt l·∫ßn duy nh·∫•t
- N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y
- Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai

¬© 2025 TopCV Recruitment System
`;

    return { html, text };
  }

  /**
   * Get job application email template
   * @param {Object} jobData - Job information
   * @param {Object} candidateData - Candidate information
   * @returns {Object} - HTML and text templates
   */
  getJobApplicationTemplate(jobData, candidateData) {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>·ª®ng tuy·ªÉn m·ªõi - ${jobData.title}</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #28a745; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .job-info { background: white; padding: 20px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #28a745; }
            .candidate-info { background: #e8f5e9; padding: 20px; margin: 15px 0; border-radius: 8px; }
            .view-button { display: inline-block; background: #28a745; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üìã ·ª®ng tuy·ªÉn m·ªõi</h1>
                <p>TopCV Recruitment System</p>
            </div>
            <div class="content">
                <h2>B·∫°n c√≥ ·ª©ng vi√™n m·ªõi!</h2>
                <p>M·ªôt ·ª©ng vi√™n v·ª´a n·ªôp ƒë∆°n ·ª©ng tuy·ªÉn cho v·ªã tr√≠ c·ªßa b·∫°n.</p>
                
                <div class="job-info">
                    <h3>üìå Th√¥ng tin v·ªã tr√≠</h3>
                    <p><strong>T√™n v·ªã tr√≠:</strong> ${jobData.title}</p>
                    <p><strong>M·ª©c l∆∞∆°ng:</strong> ${jobData.salary_min?.toLocaleString()} - ${jobData.salary_max?.toLocaleString()} VND</p>
                    <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${jobData.address || 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
                </div>
                
                <div class="candidate-info">
                    <h3>üë§ Th√¥ng tin ·ª©ng vi√™n</h3>
                    <p><strong>H·ªç t√™n:</strong> ${candidateData.full_name}</p>
                    <p><strong>Email:</strong> ${candidateData.email}</p>
                    <p><strong>Th·ªùi gian ·ª©ng tuy·ªÉn:</strong> ${new Date().toLocaleString('vi-VN')}</p>
                </div>
                
                <div style="text-align: center;">
                    <a href="https://topcv.click/applications" class="view-button">Xem chi ti·∫øt ·ª©ng tuy·ªÉn</a>
                </div>
                
                <p>Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v√† CV c·ªßa ·ª©ng vi√™n.</p>
            </div>
            <div class="footer">
                <p>¬© 2025 TopCV Recruitment System. All rights reserved.</p>
                <p>Truy c·∫≠p: https://topcv.click</p>
            </div>
        </div>
    </body>
    </html>`;

    const text = `
TopCV Recruitment - ·ª®ng tuy·ªÉn m·ªõi

B·∫°n c√≥ ·ª©ng vi√™n m·ªõi!

Th√¥ng tin v·ªã tr√≠:
- T√™n v·ªã tr√≠: ${jobData.title}
- M·ª©c l∆∞∆°ng: ${jobData.salary_min?.toLocaleString()} - ${jobData.salary_max?.toLocaleString()} VND
- ƒê·ªãa ƒëi·ªÉm: ${jobData.address || 'Kh√¥ng x√°c ƒë·ªãnh'}

Th√¥ng tin ·ª©ng vi√™n:
- H·ªç t√™n: ${candidateData.full_name}
- Email: ${candidateData.email}
- Th·ªùi gian ·ª©ng tuy·ªÉn: ${new Date().toLocaleString('vi-VN')}

Truy c·∫≠p https://topcv.click/applications ƒë·ªÉ xem chi ti·∫øt.

¬© 2025 TopCV Recruitment System
`;

    return { html, text };
  }
}

// Export singleton instance
module.exports = new EmailService(); 